///////////////////////////////////////////////////////////////////////////////
///
/// MIT License
///
/// Copyright(c) 2025 TekyoDrift
///
/// Permission is hereby granted, free of charge, to any person obtaining a
/// copy of this software and associated documentation files (the "Software"),
/// to deal in the Software without restriction, including without limitation
/// the rights to use, copy, modify, merge, publish, distribute, sublicense,
/// and/or sell copies of the Software, and to permit persons to whom the
/// Software is furnished to do so, subject to the following coditions:
///
/// The above copyright notice and this permission notice shall be included
/// in all copies or substantial portions of the Software?
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
/// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
///
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Pragma
///////////////////////////////////////////////////////////////////////////////
#pragma once

///////////////////////////////////////////////////////////////////////////////
// Dependencies
///////////////////////////////////////////////////////////////////////////////
#include "IMonitorModule.hpp"
#include <string.h>
#include <fstream>
#include <filesystem>
#include <vector>

///////////////////////////////////////////////////////////////////////////////
/// \brief Battery's related module
///
///////////////////////////////////////////////////////////////////////////////
class BatteryModule : public  IMonitorModule
{

public:

    ///////////////////////////////////////////////////////////////////////////
    // Custom type
    ///////////////////////////////////////////////////////////////////////////
    using Data = struct {
        std::string m_capacity;
        std::string m_capacity_level;
        std::string m_charge_full_design;
        std::string m_charge_full;
        std::string m_charge_now;
        std::string m_current_now;
        std::string m_manufacturer;
        std::string m_serial_number;
        std::string m_type;
        std::string m_alarm;
        std::string m_voltage_min_design;
        std::string m_voltage_now;
        std::string m_model_name;
        std::string m_present;
        std::string m_status;
        std::string m_technology;
    };

private:
    ///////////////////////////////////////////////////////////////////////////
    // Private properties
    ///////////////////////////////////////////////////////////////////////////
    std::vector<Data> m_battery;
    bool m_enabled;

public:
    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default module constructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    BatteryModule(void);

    ///////////////////////////////////////////////////////////////////////////
    /// \brief Default module destructor
    ///
    ///////////////////////////////////////////////////////////////////////////
    ~BatteryModule();

public:
    ///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////
    void setEnabled(bool enabled) override;

    ///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////
    bool isEnabled(void) const override;

     ///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////
    void setCapacity(const std::string& battery);

    ///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////
    bool refresh(void) override;

    ///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////
    std::string getCapacity(void) const;

    ///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////
    std::vector<BatteryModule::Data> getBattery(void) const;
};
